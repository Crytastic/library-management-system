openapi: 3.0.1
info:
  title: Rental microservice of library management system
  description: Rental microservice of library management system that provides operations on rentals
  version: 1.0.0
servers:
  - url: "http://localhost:8081"
tags:
  - name: Rental

components:
  schemas:
    RentalDTO:
      title: "A rental"
      description: "Represents a single rental of a book in a library"
      properties:
        id: { type: integer, format: int64, description: "ID of rental", example: 24 }
        bookId:
          type: integer
          format: int64
          description: "Id of the book being borrowed"
          example: 11
        borrowerId:
          type: integer
          format: int64
          description: "Id of the person borrowing the book"
          example: 12
        borrowDate:
          type: string
          format: date-time
          description: "Date when the book was borrowed"
          example: "2024-04-03T10:15:30Z"
        expectedReturnDate:
          type: string
          format: date-time
          description: "Date when the book is expected to be returned"
          example: "2024-07-03T10:15:30Z"
        returned:
          type: boolean
          description: "Indicates whether the book has been returned"
          example: false
        returnDate:
          type: string
          format: date-time
          description: "Date when the book was returned, null If it hasn't been returned yet"
          example: "2024-04-06T08:30:00Z"
        lateReturnWeeklyFine:
          type: number
          description: "Weekly fine for late returns in euros"
          example: "1.50"
        fineResolved:
          type: boolean
          description: "Whether the fine for late return is resolved. True if book is returned and fine has been paid (or there is no fine). False otherwise."
          example: true

paths:
  /api/test:
    get:
      tags:
        - Rental
      summary: Returns test message response
      operationId: test
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: RentalTestResponse
                properties:
                  message:
                    type: string
  /api/rentals:
    get:
      tags:
        - Rental
      summary: Returns all rentals
      operationId: getRentals
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                title: RentalsResponse
                items:
                  $ref: '#/components/schemas/RentalDTO'
    post:
      tags:
        - Rental
      summary: Borrow a book
      operationId: createRental
      parameters:
        - { name: bookId,
            in: query,
            required: true,
            schema: { type: integer, format: int64},
            description: "Id of borrowed book" }
        - { name: borrowerId,
            in: query,
            required: true,
            schema: { type: integer, format: int64 },
            description: "Id of borrower" }
        - { name: expectedReturnDate,
            in: query,
            required: false,
            schema: { type: string, format: date-time },
            description: "Expected return date. Three months from now If not specified." }
        - { name: lateReturnWeeklyFine,
            in: query,
            required: false,
            schema: { type: number },
            description: "Late return weekly fine in euros. 1 EUR if not specified." }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
  /api/rentals/{id}:
    get:
      tags:
        - Rental
      summary: Get rental by id
      operationId: getRental
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
    patch:
      tags:
        - Rental
      summary: Update an existing rental
      operationId: updateRental
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: bookId
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: borrowerId
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: borrowDate
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: expectedReturnDate
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: returned
          required: false
          schema:
            type: boolean
        - in: query
          name: returnDate
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: lateReturnWeeklyFine
          required: false
          schema:
            type: number
        - in: query
          name: fineResolved
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '404':
          description: Not found
    delete:
      tags:
        - Rental
      summary: Delete rental by id
      operationId: deleteRental
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/rentals/{id}/fine:
    get:
      tags:
        - Rental
      summary: Get fine for a rental by ID
      operationId: getFineById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: number
        '404':
          description: Not found
