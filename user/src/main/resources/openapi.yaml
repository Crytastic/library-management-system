openapi: 3.0.1
info:
  title: User microservice of library management system
  description: User microservice of library management system that provides operations with user
  version: 1.0.0
servers:
  - url: "http://localhost:8082"
tags:
  - name: User
components:
  securitySchemes:
    MUNI:
      type: oauth2
      description: get access token with OAuth 2 Authorization Code Grant
      flows:
        authorizationCode:
          authorizationUrl: https://oidc.muni.cz/oidc/authorize
          tokenUrl: https://oidc.muni.cz/oidc/token
          scopes:
            test_read: Used for reading data
            test_write: Used for modifying data
            test_1: Used for deleting data
  schemas:
    UserType:
      type: string
      enum:
        - MEMBER
        - LIBRARIAN
    UserDTO:
      title: "An user"
      description: "User object providing information about user"
      properties:
        id: { type: integer, format: int64, description: "ID of user", example: 24 }
        username: { type: string, description: "Username of user", example: "xholub" }
        address: { type: string, description: "Address of user", example: "Bratislavsk√° 850/11" }
        birthDate: { type: string, format: date, description: "Date of birth of user", example: "2003-06-25" }
        userType:
          $ref: '#/components/schemas/UserType'
paths:
  /api/users:
    get:
      tags:
        - User
      summary: Returns all users
      operationId: getUsers
      parameters:
        - in: query
          name: userType
          required: false
          description: "Equals match"
          schema:
            $ref: '#/components/schemas/UserType'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                title: UsersResponse
                items:
                  $ref: '#/components/schemas/UserDTO'
      security:
        - MUNI: [ ]

    post:
      tags:
        - User
      summary: Creates new user
      operationId: createUser
      parameters:
        - { name: username, in: query, required: true, schema: { type: string }, description: "Username of user" }
        - { name: password, in: query, required: true, schema: { type: string, format: "password" }, description: "Password of user" }
        - { name: address, in: query, required: true, schema: { type: string }, description: "Address of user" }
        - { name: birthDate, in: query, required: true, schema: { type: string, format: date }, description: "Date of birth for user" }
        - { name: userType, in: query, required: true, schema: { $ref: '#/components/schemas/UserType' }, description: "Type of user" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        "422":
          description: User with your username already exists
      security:
        - MUNI: [ test_write ]

    delete:
      tags:
        - User
      summary: Delete all users
      operationId: deleteUsers
      responses:
        '204':
          description: No content
      security:
        - MUNI: [ test_1 ]

  /api/users/{id}:
    get:
      tags:
        - User
      summary: Get user by id
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Not found
      security:
        - MUNI: [ test_read ]

    delete:
      tags:
        - User
      summary: Delete user by id
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
      security:
        - MUNI: [ test_1 ]

    patch:
      tags:
        - User
      summary: Update an existing user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: password
          required: true
          schema:
            type: string
            format: password
        - in: query
          name: address
          required: false
          schema:
            type: string
        - in: query
          name: birthdate
          required: false
          schema:
            type: string
            format: date
          description: "Structure: 'YYYY-MM-DD'"
        - in: query
          name: userType
          required: false
          schema:
            $ref: '#/components/schemas/UserType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - MUNI: [ test_write ]

  /api/users/adults:
    get:
      tags:
        - User
      summary: Returns all adult users
      operationId: getAdultUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                title: UsersResponse
                items:
                  $ref: '#/components/schemas/UserDTO'
      security:
        - MUNI: [ test_read ]
