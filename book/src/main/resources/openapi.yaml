openapi: 3.0.1
info:
  title: Book microservice of library management system
  description: Book microservice of library management system that provides operations on books
  version: 1.0.0
servers:
  - url: 'http://localhost:8083'
tags:
  - name: Book

components:
  securitySchemes:
    MUNI:
      type: oauth2
      description: get access token with OAuth 2 Authorization Code Grant
      flows:
        authorizationCode:
          authorizationUrl: https://oidc.muni.cz/oidc/authorize
          tokenUrl: https://oidc.muni.cz/oidc/token
          scopes:
            test_read: Used fo reading data
            test_write: Used for modifying data
            test_1: Used for deleting data
  schemas:
    BookStatus:
      type: string
      enum:
        - AVAILABLE
        - RESERVED
        - BORROWED
    BookDTO:
      title: 'A book'
      description: 'Book object'
      properties:
        id: { type: integer, format: int64, description: 'Id of book', example: 23 }
        title: { type: string, description: 'Book title / name', example: 'Java tutorial' }
        author: { type: string, description: 'Author name', example: 'Bruno Rossi' }
        description: { type: string, description: 'Description of the book', example: 'It is *** hard' }
        status:
          $ref: '#/components/schemas/BookStatus'

paths:
  /api/books:
    get:
      tags:
        - Book
      summary: Returns all books that match provided filter
      operationId: getBooks
      parameters:
        - in: query
          name: title
          required: false
          description: 'Equals match'
          schema:
            type: string
        - in: query
          name: author
          required: false
          description: 'Equals match'
          schema:
            type: string
        - in: query
          name: description
          required: false
          description: 'Contains match'
          schema:
            type: string
        - in: query
          name: status
          required: false
          description: 'Equals match'
          schema:
            $ref: '#/components/schemas/BookStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                title: BooksResponse
                items:
                  $ref: '#/components/schemas/BookDTO'
        '401':
          description: Unauthorized - access token not provided or not valid
        '403':
          description: Forbidden - access token does not have scope test_read
      security:
        - MUNI: [ test_read ]
    post:
      tags:
        - Book
      summary: Creates new book
      operationId: createBook
      parameters:
        - { name: title, in: query, required: true, schema: { type: string }, description: 'Title of book' }
        - { name: author, in: query, required: true, schema: { type: string }, description: 'Author of book' }
        - { name: description, in: query, required: true, schema: { type: string }, description: 'Description of book' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '401':
          description: Unauthorized - access token not provided or not valid
        '403':
          description: Forbidden - access token does not have scope test_write
      security:
        - MUNI: [ test_write ]

    delete:
      tags:
        - Book
      summary: Delete all books
      operationId: deleteBooks
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - access token not provided or not valid
        '403':
          description: Forbidden - access token does not have scope test_1
      security:
        - MUNI: [ test_1 ]

  /api/books/{id}:
    get:
      tags:
        - Book
      summary: Get book by id
      operationId: getBook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '404':
          description: Not found
        '401':
          description: Unauthorized - access token not provided or not valid
        '403':
          description: Forbidden - access token does not have scope test_read
      security:
        - MUNI: [ test_read ]

    delete:
      tags:
        - Book
      summary: Delete book by id
      operationId: deleteBook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - access token not provided or not valid
        '403':
          description: Forbidden - access token does not have scope test_1
      security:
        - MUNI: [ test_1 ]

    patch:
      tags:
        - Book
      summary: Update a existing book
      operationId: updateBook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: title
          required: false
          schema:
            type: string
        - in: query
          name: author
          required: false
          schema:
            type: string
        - in: query
          name: description
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/BookStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '404':
          description: Not found
        '401':
          description: Unauthorized - access token not provided or not valid
        '403':
          description: Forbidden - access token does not have scope test_write
      security:
        - MUNI: [ test_write ]
