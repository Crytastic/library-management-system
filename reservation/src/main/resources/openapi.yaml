openapi: 3.0.1
info:
  title: Reservation microservice of library management system
  description: Reservation microservice of library management system that provides operations on reservations
  version: 1.0.0
servers:
  - url: "http://localhost:8081"
tags:
  - name: Reservation

components:
  schemas:
    ReservationDTO:
      title: "A reservation"
      description: "Reservation object"
      properties:
        id: { type: integer, format: int64, description: "Id of reservation", example: 23 }
        bookId: { type: integer, format: int64, description: "Id of book that is part of the reservation", example: 11 }
        reserveeId: { type: integer, format: int64, description: "Id of user that created this reservation", example: 11 }
        reservedFrom: { type: string, format: date-time, description: "Date when reservation was created", example: "2024-04-03T10:15:30Z" }
        reservedTo: { type: string, format: date-time, description: "Date when the reservation was/will be cancelled", example: "2024-04-03T10:15:30Z" }

paths:
  /api/test:
    get:
      tags:
        - Reservation
      summary: Returns test message response
      operationId: test
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: ReservationTestResponse
                properties:
                  message:
                    type: string
  /api/reservations:
    get:
      tags:
        - Reservation
      summary: Returns all reservations
      operationId: getReservations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTO'
    post:
      tags:
        - Reservation
      summary: Creates new reservation
      operationId: createReservation
      parameters:
        - { name: bookId,
            in: query,
            required: true,
            schema: { type: integer, format: int64 },
            description: "Id of reserved book" }
        - { name: reserveeId,
            in: query,
            required: true,
            schema: { type: integer, format: int64 },
            description: "Id of user reserving the book" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDTO'

  /api/reservations/{id}:
    get:
      tags:
        - Reservation
      summary: Get reservation by id
      operationId: getReservation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDTO'
    patch:
      tags:
        - Reservation
      summary: Update an existing reservation
      operationId: updateReservation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: bookId
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: reserveeId
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: reservedFrom
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: reservedTo
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
        '404':
          description: Not found
    delete:
      tags:
        - Reservation
      summary: Delete reservation by id
      operationId: deleteReservation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content

  /api/reservations/active:
    get:
      tags:
        - Reservation
      summary: Returns all active reservations
      operationId: getActiveReservations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTO'

  /api/reservations/expired:
    get:
      tags:
        - Reservation
      summary: Returns all expired reservations
      operationId: getExpiredReservations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTO'
